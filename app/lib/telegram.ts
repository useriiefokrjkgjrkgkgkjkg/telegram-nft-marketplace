const TELEGRAM_API = 'https://api.telegram.org/bot';

export async function sendMessage(chatId: number, text: string) {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error('TELEGRAM_BOT_TOKEN is not defined');
  }

  console.log('Sending message:', { chatId, text });
  
  try {
    const response = await fetch(`${TELEGRAM_API}${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Telegram API error:', errorData);
      throw new Error(`Telegram API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    console.log('Message sent successfully:', result);
    return result;
  } catch (error) {
    console.error('Error sending message:', error);
    throw error;
  }
}

export async function setWebhook(url: string) {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error('TELEGRAM_BOT_TOKEN is not defined');
  }

  console.log('Setting webhook to:', url);
  
  try {
    const response = await fetch(`${TELEGRAM_API}${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: url,
        allowed_updates: ['message'],
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('Telegram API error:', errorData);
      throw new Error(`Telegram API error: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    console.log('Webhook set successfully:', result);
    return result;
  } catch (error) {
    console.error('Error setting webhook:', error);
    throw error;
  }
}

export const commands = {
  start: async (chatId: number) => {
    return sendMessage(
      chatId,
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NFT Marketplace! üéÅ

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–∫—É–ø–∞—Ç—å –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å NFT –ø–æ–¥–∞—Ä–∫–∏
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`
    );
  },
  
  help: async (chatId: number) => {
    return sendMessage(
      chatId,
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/market - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ NFT
/my_gifts - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–∞—Ä–∫–∏
/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support`
    );
  },

  market: async (chatId: number) => {
    return sendMessage(
      chatId,
      `üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å NFT

–î–æ—Å—Ç—É–ø–Ω—ã–µ NFT:
1. Winter Collection 2024 ‚ùÑÔ∏è
2. Valentine's Special üíù
3. Rare Gems üíé

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy [–Ω–æ–º–µ—Ä]`
    );
  },

  my_gifts: async (chatId: number) => {
    return sendMessage(
      chatId,
      `üéÅ –í–∞—à–∏ NFT –ø–æ–¥–∞—Ä–∫–∏:

Listing:
‚Ä¢ Winter Star ‚≠êÔ∏è (0.5 TON)
‚Ä¢ Love Letter üíå (0.8 TON)

Unlisted:
‚Ä¢ Crystal Snowflake ‚ùÑÔ∏è
‚Ä¢ Golden Key üîë`
    );
  },

  balance: async (chatId: number) => {
    return sendMessage(
      chatId,
      `üíé –í–∞—à –±–∞–ª–∞–Ω—Å:

TON: 1.234
Gifts: 4
Listed: 2`
    );
  },

  support: async (chatId: number) => {
    return sendMessage(
      chatId,
      `üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º:
@support_nft_market

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7`
    );
  },
}; 